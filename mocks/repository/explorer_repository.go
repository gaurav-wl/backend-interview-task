// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	explorerdb "github.com/backend-interview-task/db/gen/explorer"
	mock "github.com/stretchr/testify/mock"

	models "github.com/backend-interview-task/internal/models"
)

// ExplorerRepository is an autogenerated mock type for the ExplorerRepository type
type ExplorerRepository struct {
	mock.Mock
}

type ExplorerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ExplorerRepository) EXPECT() *ExplorerRepository_Expecter {
	return &ExplorerRepository_Expecter{mock: &_m.Mock}
}

// CountLikes provides a mock function with given fields: ctx, recipientUserID
func (_m *ExplorerRepository) CountLikes(ctx context.Context, recipientUserID string) (int64, error) {
	ret := _m.Called(ctx, recipientUserID)

	if len(ret) == 0 {
		panic("no return value specified for CountLikes")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, recipientUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, recipientUserID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, recipientUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExplorerRepository_CountLikes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLikes'
type ExplorerRepository_CountLikes_Call struct {
	*mock.Call
}

// CountLikes is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientUserID string
func (_e *ExplorerRepository_Expecter) CountLikes(ctx interface{}, recipientUserID interface{}) *ExplorerRepository_CountLikes_Call {
	return &ExplorerRepository_CountLikes_Call{Call: _e.mock.On("CountLikes", ctx, recipientUserID)}
}

func (_c *ExplorerRepository_CountLikes_Call) Run(run func(ctx context.Context, recipientUserID string)) *ExplorerRepository_CountLikes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ExplorerRepository_CountLikes_Call) Return(_a0 int64, _a1 error) *ExplorerRepository_CountLikes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExplorerRepository_CountLikes_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *ExplorerRepository_CountLikes_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDecision provides a mock function with given fields: ctx, arg
func (_m *ExplorerRepository) CreateDecision(ctx context.Context, arg explorerdb.CreateDecisionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, explorerdb.CreateDecisionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExplorerRepository_CreateDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDecision'
type ExplorerRepository_CreateDecision_Call struct {
	*mock.Call
}

// CreateDecision is a helper method to define mock.On call
//   - ctx context.Context
//   - arg explorerdb.CreateDecisionParams
func (_e *ExplorerRepository_Expecter) CreateDecision(ctx interface{}, arg interface{}) *ExplorerRepository_CreateDecision_Call {
	return &ExplorerRepository_CreateDecision_Call{Call: _e.mock.On("CreateDecision", ctx, arg)}
}

func (_c *ExplorerRepository_CreateDecision_Call) Run(run func(ctx context.Context, arg explorerdb.CreateDecisionParams)) *ExplorerRepository_CreateDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(explorerdb.CreateDecisionParams))
	})
	return _c
}

func (_c *ExplorerRepository_CreateDecision_Call) Return(_a0 error) *ExplorerRepository_CreateDecision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExplorerRepository_CreateDecision_Call) RunAndReturn(run func(context.Context, explorerdb.CreateDecisionParams) error) *ExplorerRepository_CreateDecision_Call {
	_c.Call.Return(run)
	return _c
}

// GetLikers provides a mock function with given fields: ctx, recipientUserID, cursor
func (_m *ExplorerRepository) GetLikers(ctx context.Context, recipientUserID string, cursor string) ([]models.Liker, string, error) {
	ret := _m.Called(ctx, recipientUserID, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetLikers")
	}

	var r0 []models.Liker
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.Liker, string, error)); ok {
		return rf(ctx, recipientUserID, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.Liker); ok {
		r0 = rf(ctx, recipientUserID, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Liker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, recipientUserID, cursor)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, recipientUserID, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExplorerRepository_GetLikers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikers'
type ExplorerRepository_GetLikers_Call struct {
	*mock.Call
}

// GetLikers is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientUserID string
//   - cursor string
func (_e *ExplorerRepository_Expecter) GetLikers(ctx interface{}, recipientUserID interface{}, cursor interface{}) *ExplorerRepository_GetLikers_Call {
	return &ExplorerRepository_GetLikers_Call{Call: _e.mock.On("GetLikers", ctx, recipientUserID, cursor)}
}

func (_c *ExplorerRepository_GetLikers_Call) Run(run func(ctx context.Context, recipientUserID string, cursor string)) *ExplorerRepository_GetLikers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ExplorerRepository_GetLikers_Call) Return(_a0 []models.Liker, _a1 string, _a2 error) *ExplorerRepository_GetLikers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ExplorerRepository_GetLikers_Call) RunAndReturn(run func(context.Context, string, string) ([]models.Liker, string, error)) *ExplorerRepository_GetLikers_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewLikers provides a mock function with given fields: ctx, recipientUserID, cursor
func (_m *ExplorerRepository) GetNewLikers(ctx context.Context, recipientUserID string, cursor string) ([]models.Liker, string, error) {
	ret := _m.Called(ctx, recipientUserID, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetNewLikers")
	}

	var r0 []models.Liker
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.Liker, string, error)); ok {
		return rf(ctx, recipientUserID, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.Liker); ok {
		r0 = rf(ctx, recipientUserID, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Liker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, recipientUserID, cursor)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, recipientUserID, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExplorerRepository_GetNewLikers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewLikers'
type ExplorerRepository_GetNewLikers_Call struct {
	*mock.Call
}

// GetNewLikers is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientUserID string
//   - cursor string
func (_e *ExplorerRepository_Expecter) GetNewLikers(ctx interface{}, recipientUserID interface{}, cursor interface{}) *ExplorerRepository_GetNewLikers_Call {
	return &ExplorerRepository_GetNewLikers_Call{Call: _e.mock.On("GetNewLikers", ctx, recipientUserID, cursor)}
}

func (_c *ExplorerRepository_GetNewLikers_Call) Run(run func(ctx context.Context, recipientUserID string, cursor string)) *ExplorerRepository_GetNewLikers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ExplorerRepository_GetNewLikers_Call) Return(_a0 []models.Liker, _a1 string, _a2 error) *ExplorerRepository_GetNewLikers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ExplorerRepository_GetNewLikers_Call) RunAndReturn(run func(context.Context, string, string) ([]models.Liker, string, error)) *ExplorerRepository_GetNewLikers_Call {
	_c.Call.Return(run)
	return _c
}

// HasMutualLike provides a mock function with given fields: ctx, arg
func (_m *ExplorerRepository) HasMutualLike(ctx context.Context, arg explorerdb.HasMutualLikeParams) (*bool, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for HasMutualLike")
	}

	var r0 *bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, explorerdb.HasMutualLikeParams) (*bool, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, explorerdb.HasMutualLikeParams) *bool); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, explorerdb.HasMutualLikeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExplorerRepository_HasMutualLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasMutualLike'
type ExplorerRepository_HasMutualLike_Call struct {
	*mock.Call
}

// HasMutualLike is a helper method to define mock.On call
//   - ctx context.Context
//   - arg explorerdb.HasMutualLikeParams
func (_e *ExplorerRepository_Expecter) HasMutualLike(ctx interface{}, arg interface{}) *ExplorerRepository_HasMutualLike_Call {
	return &ExplorerRepository_HasMutualLike_Call{Call: _e.mock.On("HasMutualLike", ctx, arg)}
}

func (_c *ExplorerRepository_HasMutualLike_Call) Run(run func(ctx context.Context, arg explorerdb.HasMutualLikeParams)) *ExplorerRepository_HasMutualLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(explorerdb.HasMutualLikeParams))
	})
	return _c
}

func (_c *ExplorerRepository_HasMutualLike_Call) Return(_a0 *bool, _a1 error) *ExplorerRepository_HasMutualLike_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExplorerRepository_HasMutualLike_Call) RunAndReturn(run func(context.Context, explorerdb.HasMutualLikeParams) (*bool, error)) *ExplorerRepository_HasMutualLike_Call {
	_c.Call.Return(run)
	return _c
}

// NewExplorerRepository creates a new instance of ExplorerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExplorerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExplorerRepository {
	mock := &ExplorerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
