// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/backend-interview-task/proto"
)

// ExplorerCore is an autogenerated mock type for the ExplorerCore type
type ExplorerCore struct {
	mock.Mock
}

type ExplorerCore_Expecter struct {
	mock *mock.Mock
}

func (_m *ExplorerCore) EXPECT() *ExplorerCore_Expecter {
	return &ExplorerCore_Expecter{mock: &_m.Mock}
}

// CountLikers provides a mock function with given fields: ctx, req
func (_m *ExplorerCore) CountLikers(ctx context.Context, req *proto.CountLikedYouRequest) (*proto.CountLikedYouResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CountLikers")
	}

	var r0 *proto.CountLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CountLikedYouRequest) (*proto.CountLikedYouResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CountLikedYouRequest) *proto.CountLikedYouResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CountLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CountLikedYouRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExplorerCore_CountLikers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountLikers'
type ExplorerCore_CountLikers_Call struct {
	*mock.Call
}

// CountLikers is a helper method to define mock.On call
//   - ctx context.Context
//   - req *proto.CountLikedYouRequest
func (_e *ExplorerCore_Expecter) CountLikers(ctx interface{}, req interface{}) *ExplorerCore_CountLikers_Call {
	return &ExplorerCore_CountLikers_Call{Call: _e.mock.On("CountLikers", ctx, req)}
}

func (_c *ExplorerCore_CountLikers_Call) Run(run func(ctx context.Context, req *proto.CountLikedYouRequest)) *ExplorerCore_CountLikers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.CountLikedYouRequest))
	})
	return _c
}

func (_c *ExplorerCore_CountLikers_Call) Return(_a0 *proto.CountLikedYouResponse, _a1 error) *ExplorerCore_CountLikers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExplorerCore_CountLikers_Call) RunAndReturn(run func(context.Context, *proto.CountLikedYouRequest) (*proto.CountLikedYouResponse, error)) *ExplorerCore_CountLikers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDecision provides a mock function with given fields: ctx, req
func (_m *ExplorerCore) CreateDecision(ctx context.Context, req *proto.PutDecisionRequest) (*proto.PutDecisionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateDecision")
	}

	var r0 *proto.PutDecisionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.PutDecisionRequest) (*proto.PutDecisionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.PutDecisionRequest) *proto.PutDecisionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PutDecisionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.PutDecisionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExplorerCore_CreateDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDecision'
type ExplorerCore_CreateDecision_Call struct {
	*mock.Call
}

// CreateDecision is a helper method to define mock.On call
//   - ctx context.Context
//   - req *proto.PutDecisionRequest
func (_e *ExplorerCore_Expecter) CreateDecision(ctx interface{}, req interface{}) *ExplorerCore_CreateDecision_Call {
	return &ExplorerCore_CreateDecision_Call{Call: _e.mock.On("CreateDecision", ctx, req)}
}

func (_c *ExplorerCore_CreateDecision_Call) Run(run func(ctx context.Context, req *proto.PutDecisionRequest)) *ExplorerCore_CreateDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.PutDecisionRequest))
	})
	return _c
}

func (_c *ExplorerCore_CreateDecision_Call) Return(_a0 *proto.PutDecisionResponse, _a1 error) *ExplorerCore_CreateDecision_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExplorerCore_CreateDecision_Call) RunAndReturn(run func(context.Context, *proto.PutDecisionRequest) (*proto.PutDecisionResponse, error)) *ExplorerCore_CreateDecision_Call {
	_c.Call.Return(run)
	return _c
}

// ListLikers provides a mock function with given fields: ctx, req
func (_m *ExplorerCore) ListLikers(ctx context.Context, req *proto.ListLikedYouRequest) (*proto.ListLikedYouResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListLikers")
	}

	var r0 *proto.ListLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListLikedYouRequest) (*proto.ListLikedYouResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListLikedYouRequest) *proto.ListLikedYouResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListLikedYouRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExplorerCore_ListLikers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLikers'
type ExplorerCore_ListLikers_Call struct {
	*mock.Call
}

// ListLikers is a helper method to define mock.On call
//   - ctx context.Context
//   - req *proto.ListLikedYouRequest
func (_e *ExplorerCore_Expecter) ListLikers(ctx interface{}, req interface{}) *ExplorerCore_ListLikers_Call {
	return &ExplorerCore_ListLikers_Call{Call: _e.mock.On("ListLikers", ctx, req)}
}

func (_c *ExplorerCore_ListLikers_Call) Run(run func(ctx context.Context, req *proto.ListLikedYouRequest)) *ExplorerCore_ListLikers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ListLikedYouRequest))
	})
	return _c
}

func (_c *ExplorerCore_ListLikers_Call) Return(_a0 *proto.ListLikedYouResponse, _a1 error) *ExplorerCore_ListLikers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExplorerCore_ListLikers_Call) RunAndReturn(run func(context.Context, *proto.ListLikedYouRequest) (*proto.ListLikedYouResponse, error)) *ExplorerCore_ListLikers_Call {
	_c.Call.Return(run)
	return _c
}

// ListNewLikers provides a mock function with given fields: ctx, req
func (_m *ExplorerCore) ListNewLikers(ctx context.Context, req *proto.ListLikedYouRequest) (*proto.ListLikedYouResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListNewLikers")
	}

	var r0 *proto.ListLikedYouResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListLikedYouRequest) (*proto.ListLikedYouResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListLikedYouRequest) *proto.ListLikedYouResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListLikedYouResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListLikedYouRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExplorerCore_ListNewLikers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNewLikers'
type ExplorerCore_ListNewLikers_Call struct {
	*mock.Call
}

// ListNewLikers is a helper method to define mock.On call
//   - ctx context.Context
//   - req *proto.ListLikedYouRequest
func (_e *ExplorerCore_Expecter) ListNewLikers(ctx interface{}, req interface{}) *ExplorerCore_ListNewLikers_Call {
	return &ExplorerCore_ListNewLikers_Call{Call: _e.mock.On("ListNewLikers", ctx, req)}
}

func (_c *ExplorerCore_ListNewLikers_Call) Run(run func(ctx context.Context, req *proto.ListLikedYouRequest)) *ExplorerCore_ListNewLikers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ListLikedYouRequest))
	})
	return _c
}

func (_c *ExplorerCore_ListNewLikers_Call) Return(_a0 *proto.ListLikedYouResponse, _a1 error) *ExplorerCore_ListNewLikers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExplorerCore_ListNewLikers_Call) RunAndReturn(run func(context.Context, *proto.ListLikedYouRequest) (*proto.ListLikedYouResponse, error)) *ExplorerCore_ListNewLikers_Call {
	_c.Call.Return(run)
	return _c
}

// NewExplorerCore creates a new instance of ExplorerCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExplorerCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExplorerCore {
	mock := &ExplorerCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
